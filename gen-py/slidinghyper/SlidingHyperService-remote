#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from slidinghyper import SlidingHyperService
from slidinghyper.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  string ping()')
  print('  void add_many(i32 timestamp, string key,  values)')
  print('  i32 card(i32 timestamp, i32 window,  keys,  values)')
  print('  void flush()')
  print('  void add(i32 timestamp, string key, string value)')
  print('  i32 get(i32 timestamp, i16 window, string key)')
  print('  i32 get_union(i32 timestamp, i16 window,  keys)')
  print('  i32 get_with_element(i32 timestamp, i16 window, string key, string value)')
  print('  i32 get_union_with_element(i32 timestamp, i16 window,  keys, string value)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = SlidingHyperService.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print('ping requires 0 args')
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'add_many':
  if len(args) != 3:
    print('add_many requires 3 args')
    sys.exit(1)
  pp.pprint(client.add_many(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'card':
  if len(args) != 4:
    print('card requires 4 args')
    sys.exit(1)
  pp.pprint(client.card(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'flush':
  if len(args) != 0:
    print('flush requires 0 args')
    sys.exit(1)
  pp.pprint(client.flush())

elif cmd == 'add':
  if len(args) != 3:
    print('add requires 3 args')
    sys.exit(1)
  pp.pprint(client.add(eval(args[0]),args[1],args[2],))

elif cmd == 'get':
  if len(args) != 3:
    print('get requires 3 args')
    sys.exit(1)
  pp.pprint(client.get(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'get_union':
  if len(args) != 3:
    print('get_union requires 3 args')
    sys.exit(1)
  pp.pprint(client.get_union(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'get_with_element':
  if len(args) != 4:
    print('get_with_element requires 4 args')
    sys.exit(1)
  pp.pprint(client.get_with_element(eval(args[0]),eval(args[1]),args[2],args[3],))

elif cmd == 'get_union_with_element':
  if len(args) != 4:
    print('get_union_with_element requires 4 args')
    sys.exit(1)
  pp.pprint(client.get_union_with_element(eval(args[0]),eval(args[1]),eval(args[2]),args[3],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
