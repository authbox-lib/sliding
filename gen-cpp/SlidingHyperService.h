/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SlidingHyperService_H
#define SlidingHyperService_H

#include <thrift/TDispatchProcessor.h>
#include "sliding-hyper_types.h"



class SlidingHyperServiceIf {
 public:
  virtual ~SlidingHyperServiceIf() {}
  virtual void ping(std::string& _return) = 0;
  virtual void add_many(const int32_t timestamp, const std::string& key, const std::vector<std::string> & values) = 0;
  virtual int32_t card(const int32_t timestamp, const int32_t window, const std::vector<std::string> & keys, const std::vector<std::string> & values) = 0;
  virtual void flush() = 0;
  virtual void add(const int32_t timestamp, const std::string& key, const std::string& value) = 0;
  virtual int32_t get(const int32_t timestamp, const int16_t window, const std::string& key) = 0;
  virtual int32_t get_union(const int32_t timestamp, const int16_t window, const std::vector<std::string> & keys) = 0;
  virtual int32_t get_with_element(const int32_t timestamp, const int16_t window, const std::string& key, const std::string& value) = 0;
  virtual int32_t get_union_with_element(const int32_t timestamp, const int16_t window, const std::vector<std::string> & keys, const std::string& value) = 0;
};

class SlidingHyperServiceIfFactory {
 public:
  typedef SlidingHyperServiceIf Handler;

  virtual ~SlidingHyperServiceIfFactory() {}

  virtual SlidingHyperServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SlidingHyperServiceIf* /* handler */) = 0;
};

class SlidingHyperServiceIfSingletonFactory : virtual public SlidingHyperServiceIfFactory {
 public:
  SlidingHyperServiceIfSingletonFactory(const boost::shared_ptr<SlidingHyperServiceIf>& iface) : iface_(iface) {}
  virtual ~SlidingHyperServiceIfSingletonFactory() {}

  virtual SlidingHyperServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SlidingHyperServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<SlidingHyperServiceIf> iface_;
};

class SlidingHyperServiceNull : virtual public SlidingHyperServiceIf {
 public:
  virtual ~SlidingHyperServiceNull() {}
  void ping(std::string& /* _return */) {
    return;
  }
  void add_many(const int32_t /* timestamp */, const std::string& /* key */, const std::vector<std::string> & /* values */) {
    return;
  }
  int32_t card(const int32_t /* timestamp */, const int32_t /* window */, const std::vector<std::string> & /* keys */, const std::vector<std::string> & /* values */) {
    int32_t _return = 0;
    return _return;
  }
  void flush() {
    return;
  }
  void add(const int32_t /* timestamp */, const std::string& /* key */, const std::string& /* value */) {
    return;
  }
  int32_t get(const int32_t /* timestamp */, const int16_t /* window */, const std::string& /* key */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t get_union(const int32_t /* timestamp */, const int16_t /* window */, const std::vector<std::string> & /* keys */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t get_with_element(const int32_t /* timestamp */, const int16_t /* window */, const std::string& /* key */, const std::string& /* value */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t get_union_with_element(const int32_t /* timestamp */, const int16_t /* window */, const std::vector<std::string> & /* keys */, const std::string& /* value */) {
    int32_t _return = 0;
    return _return;
  }
};


class SlidingHyperService_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  SlidingHyperService_ping_args(const SlidingHyperService_ping_args&);
  SlidingHyperService_ping_args& operator=(const SlidingHyperService_ping_args&);
  SlidingHyperService_ping_args() {
  }

  virtual ~SlidingHyperService_ping_args() throw();

  bool operator == (const SlidingHyperService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SlidingHyperService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlidingHyperService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_ping_args& obj);
};


class SlidingHyperService_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~SlidingHyperService_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_ping_pargs& obj);
};

typedef struct _SlidingHyperService_ping_result__isset {
  _SlidingHyperService_ping_result__isset() : success(false) {}
  bool success :1;
} _SlidingHyperService_ping_result__isset;

class SlidingHyperService_ping_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  SlidingHyperService_ping_result(const SlidingHyperService_ping_result&);
  SlidingHyperService_ping_result& operator=(const SlidingHyperService_ping_result&);
  SlidingHyperService_ping_result() : success() {
  }

  virtual ~SlidingHyperService_ping_result() throw();
  std::string success;

  _SlidingHyperService_ping_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const SlidingHyperService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SlidingHyperService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlidingHyperService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_ping_result& obj);
};

typedef struct _SlidingHyperService_ping_presult__isset {
  _SlidingHyperService_ping_presult__isset() : success(false) {}
  bool success :1;
} _SlidingHyperService_ping_presult__isset;

class SlidingHyperService_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~SlidingHyperService_ping_presult() throw();
  std::string* success;

  _SlidingHyperService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_ping_presult& obj);
};

typedef struct _SlidingHyperService_add_many_args__isset {
  _SlidingHyperService_add_many_args__isset() : timestamp(false), key(false), values(false) {}
  bool timestamp :1;
  bool key :1;
  bool values :1;
} _SlidingHyperService_add_many_args__isset;

class SlidingHyperService_add_many_args {
 public:

  static const char* ascii_fingerprint; // = "800A361CE73471A685E95196EF7158D2";
  static const uint8_t binary_fingerprint[16]; // = {0x80,0x0A,0x36,0x1C,0xE7,0x34,0x71,0xA6,0x85,0xE9,0x51,0x96,0xEF,0x71,0x58,0xD2};

  SlidingHyperService_add_many_args(const SlidingHyperService_add_many_args&);
  SlidingHyperService_add_many_args& operator=(const SlidingHyperService_add_many_args&);
  SlidingHyperService_add_many_args() : timestamp(0), key() {
  }

  virtual ~SlidingHyperService_add_many_args() throw();
  int32_t timestamp;
  std::string key;
  std::vector<std::string>  values;

  _SlidingHyperService_add_many_args__isset __isset;

  void __set_timestamp(const int32_t val);

  void __set_key(const std::string& val);

  void __set_values(const std::vector<std::string> & val);

  bool operator == (const SlidingHyperService_add_many_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(values == rhs.values))
      return false;
    return true;
  }
  bool operator != (const SlidingHyperService_add_many_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlidingHyperService_add_many_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_add_many_args& obj);
};


class SlidingHyperService_add_many_pargs {
 public:

  static const char* ascii_fingerprint; // = "800A361CE73471A685E95196EF7158D2";
  static const uint8_t binary_fingerprint[16]; // = {0x80,0x0A,0x36,0x1C,0xE7,0x34,0x71,0xA6,0x85,0xE9,0x51,0x96,0xEF,0x71,0x58,0xD2};


  virtual ~SlidingHyperService_add_many_pargs() throw();
  const int32_t* timestamp;
  const std::string* key;
  const std::vector<std::string> * values;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_add_many_pargs& obj);
};

typedef struct _SlidingHyperService_add_many_result__isset {
  _SlidingHyperService_add_many_result__isset() : error(false) {}
  bool error :1;
} _SlidingHyperService_add_many_result__isset;

class SlidingHyperService_add_many_result {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};

  SlidingHyperService_add_many_result(const SlidingHyperService_add_many_result&);
  SlidingHyperService_add_many_result& operator=(const SlidingHyperService_add_many_result&);
  SlidingHyperService_add_many_result() {
  }

  virtual ~SlidingHyperService_add_many_result() throw();
  InternalError error;

  _SlidingHyperService_add_many_result__isset __isset;

  void __set_error(const InternalError& val);

  bool operator == (const SlidingHyperService_add_many_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SlidingHyperService_add_many_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlidingHyperService_add_many_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_add_many_result& obj);
};

typedef struct _SlidingHyperService_add_many_presult__isset {
  _SlidingHyperService_add_many_presult__isset() : error(false) {}
  bool error :1;
} _SlidingHyperService_add_many_presult__isset;

class SlidingHyperService_add_many_presult {
 public:

  static const char* ascii_fingerprint; // = "771E7EF40B572D2BFAB12C49547ADCBF";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x1E,0x7E,0xF4,0x0B,0x57,0x2D,0x2B,0xFA,0xB1,0x2C,0x49,0x54,0x7A,0xDC,0xBF};


  virtual ~SlidingHyperService_add_many_presult() throw();
  InternalError error;

  _SlidingHyperService_add_many_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_add_many_presult& obj);
};

typedef struct _SlidingHyperService_card_args__isset {
  _SlidingHyperService_card_args__isset() : timestamp(false), window(false), keys(false), values(false) {}
  bool timestamp :1;
  bool window :1;
  bool keys :1;
  bool values :1;
} _SlidingHyperService_card_args__isset;

class SlidingHyperService_card_args {
 public:

  static const char* ascii_fingerprint; // = "35AF2AC23B53F25EBA2F03422601B8FC";
  static const uint8_t binary_fingerprint[16]; // = {0x35,0xAF,0x2A,0xC2,0x3B,0x53,0xF2,0x5E,0xBA,0x2F,0x03,0x42,0x26,0x01,0xB8,0xFC};

  SlidingHyperService_card_args(const SlidingHyperService_card_args&);
  SlidingHyperService_card_args& operator=(const SlidingHyperService_card_args&);
  SlidingHyperService_card_args() : timestamp(0), window(0) {
  }

  virtual ~SlidingHyperService_card_args() throw();
  int32_t timestamp;
  int32_t window;
  std::vector<std::string>  keys;
  std::vector<std::string>  values;

  _SlidingHyperService_card_args__isset __isset;

  void __set_timestamp(const int32_t val);

  void __set_window(const int32_t val);

  void __set_keys(const std::vector<std::string> & val);

  void __set_values(const std::vector<std::string> & val);

  bool operator == (const SlidingHyperService_card_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(window == rhs.window))
      return false;
    if (!(keys == rhs.keys))
      return false;
    if (!(values == rhs.values))
      return false;
    return true;
  }
  bool operator != (const SlidingHyperService_card_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlidingHyperService_card_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_card_args& obj);
};


class SlidingHyperService_card_pargs {
 public:

  static const char* ascii_fingerprint; // = "35AF2AC23B53F25EBA2F03422601B8FC";
  static const uint8_t binary_fingerprint[16]; // = {0x35,0xAF,0x2A,0xC2,0x3B,0x53,0xF2,0x5E,0xBA,0x2F,0x03,0x42,0x26,0x01,0xB8,0xFC};


  virtual ~SlidingHyperService_card_pargs() throw();
  const int32_t* timestamp;
  const int32_t* window;
  const std::vector<std::string> * keys;
  const std::vector<std::string> * values;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_card_pargs& obj);
};

typedef struct _SlidingHyperService_card_result__isset {
  _SlidingHyperService_card_result__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SlidingHyperService_card_result__isset;

class SlidingHyperService_card_result {
 public:

  static const char* ascii_fingerprint; // = "434080405F8773F4FEEED0F8CC7A6239";
  static const uint8_t binary_fingerprint[16]; // = {0x43,0x40,0x80,0x40,0x5F,0x87,0x73,0xF4,0xFE,0xEE,0xD0,0xF8,0xCC,0x7A,0x62,0x39};

  SlidingHyperService_card_result(const SlidingHyperService_card_result&);
  SlidingHyperService_card_result& operator=(const SlidingHyperService_card_result&);
  SlidingHyperService_card_result() : success(0) {
  }

  virtual ~SlidingHyperService_card_result() throw();
  int32_t success;
  InternalError error;

  _SlidingHyperService_card_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_error(const InternalError& val);

  bool operator == (const SlidingHyperService_card_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const SlidingHyperService_card_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlidingHyperService_card_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_card_result& obj);
};

typedef struct _SlidingHyperService_card_presult__isset {
  _SlidingHyperService_card_presult__isset() : success(false), error(false) {}
  bool success :1;
  bool error :1;
} _SlidingHyperService_card_presult__isset;

class SlidingHyperService_card_presult {
 public:

  static const char* ascii_fingerprint; // = "434080405F8773F4FEEED0F8CC7A6239";
  static const uint8_t binary_fingerprint[16]; // = {0x43,0x40,0x80,0x40,0x5F,0x87,0x73,0xF4,0xFE,0xEE,0xD0,0xF8,0xCC,0x7A,0x62,0x39};


  virtual ~SlidingHyperService_card_presult() throw();
  int32_t* success;
  InternalError error;

  _SlidingHyperService_card_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_card_presult& obj);
};


class SlidingHyperService_flush_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  SlidingHyperService_flush_args(const SlidingHyperService_flush_args&);
  SlidingHyperService_flush_args& operator=(const SlidingHyperService_flush_args&);
  SlidingHyperService_flush_args() {
  }

  virtual ~SlidingHyperService_flush_args() throw();

  bool operator == (const SlidingHyperService_flush_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SlidingHyperService_flush_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlidingHyperService_flush_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_flush_args& obj);
};


class SlidingHyperService_flush_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~SlidingHyperService_flush_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_flush_pargs& obj);
};


class SlidingHyperService_flush_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  SlidingHyperService_flush_result(const SlidingHyperService_flush_result&);
  SlidingHyperService_flush_result& operator=(const SlidingHyperService_flush_result&);
  SlidingHyperService_flush_result() {
  }

  virtual ~SlidingHyperService_flush_result() throw();

  bool operator == (const SlidingHyperService_flush_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SlidingHyperService_flush_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlidingHyperService_flush_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_flush_result& obj);
};


class SlidingHyperService_flush_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~SlidingHyperService_flush_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_flush_presult& obj);
};

typedef struct _SlidingHyperService_add_args__isset {
  _SlidingHyperService_add_args__isset() : timestamp(false), key(false), value(false) {}
  bool timestamp :1;
  bool key :1;
  bool value :1;
} _SlidingHyperService_add_args__isset;

class SlidingHyperService_add_args {
 public:

  static const char* ascii_fingerprint; // = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};

  SlidingHyperService_add_args(const SlidingHyperService_add_args&);
  SlidingHyperService_add_args& operator=(const SlidingHyperService_add_args&);
  SlidingHyperService_add_args() : timestamp(0), key(), value() {
  }

  virtual ~SlidingHyperService_add_args() throw();
  int32_t timestamp;
  std::string key;
  std::string value;

  _SlidingHyperService_add_args__isset __isset;

  void __set_timestamp(const int32_t val);

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const SlidingHyperService_add_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const SlidingHyperService_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlidingHyperService_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_add_args& obj);
};


class SlidingHyperService_add_pargs {
 public:

  static const char* ascii_fingerprint; // = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};


  virtual ~SlidingHyperService_add_pargs() throw();
  const int32_t* timestamp;
  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_add_pargs& obj);
};


class SlidingHyperService_add_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  SlidingHyperService_add_result(const SlidingHyperService_add_result&);
  SlidingHyperService_add_result& operator=(const SlidingHyperService_add_result&);
  SlidingHyperService_add_result() {
  }

  virtual ~SlidingHyperService_add_result() throw();

  bool operator == (const SlidingHyperService_add_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SlidingHyperService_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlidingHyperService_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_add_result& obj);
};


class SlidingHyperService_add_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~SlidingHyperService_add_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_add_presult& obj);
};

typedef struct _SlidingHyperService_get_args__isset {
  _SlidingHyperService_get_args__isset() : timestamp(false), window(false), key(false) {}
  bool timestamp :1;
  bool window :1;
  bool key :1;
} _SlidingHyperService_get_args__isset;

class SlidingHyperService_get_args {
 public:

  static const char* ascii_fingerprint; // = "C7D2D58463AC91C552EE8B325EA2ACCC";
  static const uint8_t binary_fingerprint[16]; // = {0xC7,0xD2,0xD5,0x84,0x63,0xAC,0x91,0xC5,0x52,0xEE,0x8B,0x32,0x5E,0xA2,0xAC,0xCC};

  SlidingHyperService_get_args(const SlidingHyperService_get_args&);
  SlidingHyperService_get_args& operator=(const SlidingHyperService_get_args&);
  SlidingHyperService_get_args() : timestamp(0), window(0), key() {
  }

  virtual ~SlidingHyperService_get_args() throw();
  int32_t timestamp;
  int16_t window;
  std::string key;

  _SlidingHyperService_get_args__isset __isset;

  void __set_timestamp(const int32_t val);

  void __set_window(const int16_t val);

  void __set_key(const std::string& val);

  bool operator == (const SlidingHyperService_get_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(window == rhs.window))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const SlidingHyperService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlidingHyperService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_get_args& obj);
};


class SlidingHyperService_get_pargs {
 public:

  static const char* ascii_fingerprint; // = "C7D2D58463AC91C552EE8B325EA2ACCC";
  static const uint8_t binary_fingerprint[16]; // = {0xC7,0xD2,0xD5,0x84,0x63,0xAC,0x91,0xC5,0x52,0xEE,0x8B,0x32,0x5E,0xA2,0xAC,0xCC};


  virtual ~SlidingHyperService_get_pargs() throw();
  const int32_t* timestamp;
  const int16_t* window;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_get_pargs& obj);
};

typedef struct _SlidingHyperService_get_result__isset {
  _SlidingHyperService_get_result__isset() : success(false) {}
  bool success :1;
} _SlidingHyperService_get_result__isset;

class SlidingHyperService_get_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  SlidingHyperService_get_result(const SlidingHyperService_get_result&);
  SlidingHyperService_get_result& operator=(const SlidingHyperService_get_result&);
  SlidingHyperService_get_result() : success(0) {
  }

  virtual ~SlidingHyperService_get_result() throw();
  int32_t success;

  _SlidingHyperService_get_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SlidingHyperService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SlidingHyperService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlidingHyperService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_get_result& obj);
};

typedef struct _SlidingHyperService_get_presult__isset {
  _SlidingHyperService_get_presult__isset() : success(false) {}
  bool success :1;
} _SlidingHyperService_get_presult__isset;

class SlidingHyperService_get_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~SlidingHyperService_get_presult() throw();
  int32_t* success;

  _SlidingHyperService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_get_presult& obj);
};

typedef struct _SlidingHyperService_get_union_args__isset {
  _SlidingHyperService_get_union_args__isset() : timestamp(false), window(false), keys(false) {}
  bool timestamp :1;
  bool window :1;
  bool keys :1;
} _SlidingHyperService_get_union_args__isset;

class SlidingHyperService_get_union_args {
 public:

  static const char* ascii_fingerprint; // = "711FA60483829AA980A6EEAB19D20653";
  static const uint8_t binary_fingerprint[16]; // = {0x71,0x1F,0xA6,0x04,0x83,0x82,0x9A,0xA9,0x80,0xA6,0xEE,0xAB,0x19,0xD2,0x06,0x53};

  SlidingHyperService_get_union_args(const SlidingHyperService_get_union_args&);
  SlidingHyperService_get_union_args& operator=(const SlidingHyperService_get_union_args&);
  SlidingHyperService_get_union_args() : timestamp(0), window(0) {
  }

  virtual ~SlidingHyperService_get_union_args() throw();
  int32_t timestamp;
  int16_t window;
  std::vector<std::string>  keys;

  _SlidingHyperService_get_union_args__isset __isset;

  void __set_timestamp(const int32_t val);

  void __set_window(const int16_t val);

  void __set_keys(const std::vector<std::string> & val);

  bool operator == (const SlidingHyperService_get_union_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(window == rhs.window))
      return false;
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const SlidingHyperService_get_union_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlidingHyperService_get_union_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_get_union_args& obj);
};


class SlidingHyperService_get_union_pargs {
 public:

  static const char* ascii_fingerprint; // = "711FA60483829AA980A6EEAB19D20653";
  static const uint8_t binary_fingerprint[16]; // = {0x71,0x1F,0xA6,0x04,0x83,0x82,0x9A,0xA9,0x80,0xA6,0xEE,0xAB,0x19,0xD2,0x06,0x53};


  virtual ~SlidingHyperService_get_union_pargs() throw();
  const int32_t* timestamp;
  const int16_t* window;
  const std::vector<std::string> * keys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_get_union_pargs& obj);
};

typedef struct _SlidingHyperService_get_union_result__isset {
  _SlidingHyperService_get_union_result__isset() : success(false) {}
  bool success :1;
} _SlidingHyperService_get_union_result__isset;

class SlidingHyperService_get_union_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  SlidingHyperService_get_union_result(const SlidingHyperService_get_union_result&);
  SlidingHyperService_get_union_result& operator=(const SlidingHyperService_get_union_result&);
  SlidingHyperService_get_union_result() : success(0) {
  }

  virtual ~SlidingHyperService_get_union_result() throw();
  int32_t success;

  _SlidingHyperService_get_union_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SlidingHyperService_get_union_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SlidingHyperService_get_union_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlidingHyperService_get_union_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_get_union_result& obj);
};

typedef struct _SlidingHyperService_get_union_presult__isset {
  _SlidingHyperService_get_union_presult__isset() : success(false) {}
  bool success :1;
} _SlidingHyperService_get_union_presult__isset;

class SlidingHyperService_get_union_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~SlidingHyperService_get_union_presult() throw();
  int32_t* success;

  _SlidingHyperService_get_union_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_get_union_presult& obj);
};

typedef struct _SlidingHyperService_get_with_element_args__isset {
  _SlidingHyperService_get_with_element_args__isset() : timestamp(false), window(false), key(false), value(false) {}
  bool timestamp :1;
  bool window :1;
  bool key :1;
  bool value :1;
} _SlidingHyperService_get_with_element_args__isset;

class SlidingHyperService_get_with_element_args {
 public:

  static const char* ascii_fingerprint; // = "F45F6A06546AD167F70EE9D454711F71";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0x5F,0x6A,0x06,0x54,0x6A,0xD1,0x67,0xF7,0x0E,0xE9,0xD4,0x54,0x71,0x1F,0x71};

  SlidingHyperService_get_with_element_args(const SlidingHyperService_get_with_element_args&);
  SlidingHyperService_get_with_element_args& operator=(const SlidingHyperService_get_with_element_args&);
  SlidingHyperService_get_with_element_args() : timestamp(0), window(0), key(), value() {
  }

  virtual ~SlidingHyperService_get_with_element_args() throw();
  int32_t timestamp;
  int16_t window;
  std::string key;
  std::string value;

  _SlidingHyperService_get_with_element_args__isset __isset;

  void __set_timestamp(const int32_t val);

  void __set_window(const int16_t val);

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const SlidingHyperService_get_with_element_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(window == rhs.window))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const SlidingHyperService_get_with_element_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlidingHyperService_get_with_element_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_get_with_element_args& obj);
};


class SlidingHyperService_get_with_element_pargs {
 public:

  static const char* ascii_fingerprint; // = "F45F6A06546AD167F70EE9D454711F71";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0x5F,0x6A,0x06,0x54,0x6A,0xD1,0x67,0xF7,0x0E,0xE9,0xD4,0x54,0x71,0x1F,0x71};


  virtual ~SlidingHyperService_get_with_element_pargs() throw();
  const int32_t* timestamp;
  const int16_t* window;
  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_get_with_element_pargs& obj);
};

typedef struct _SlidingHyperService_get_with_element_result__isset {
  _SlidingHyperService_get_with_element_result__isset() : success(false) {}
  bool success :1;
} _SlidingHyperService_get_with_element_result__isset;

class SlidingHyperService_get_with_element_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  SlidingHyperService_get_with_element_result(const SlidingHyperService_get_with_element_result&);
  SlidingHyperService_get_with_element_result& operator=(const SlidingHyperService_get_with_element_result&);
  SlidingHyperService_get_with_element_result() : success(0) {
  }

  virtual ~SlidingHyperService_get_with_element_result() throw();
  int32_t success;

  _SlidingHyperService_get_with_element_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SlidingHyperService_get_with_element_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SlidingHyperService_get_with_element_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlidingHyperService_get_with_element_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_get_with_element_result& obj);
};

typedef struct _SlidingHyperService_get_with_element_presult__isset {
  _SlidingHyperService_get_with_element_presult__isset() : success(false) {}
  bool success :1;
} _SlidingHyperService_get_with_element_presult__isset;

class SlidingHyperService_get_with_element_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~SlidingHyperService_get_with_element_presult() throw();
  int32_t* success;

  _SlidingHyperService_get_with_element_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_get_with_element_presult& obj);
};

typedef struct _SlidingHyperService_get_union_with_element_args__isset {
  _SlidingHyperService_get_union_with_element_args__isset() : timestamp(false), window(false), keys(false), value(false) {}
  bool timestamp :1;
  bool window :1;
  bool keys :1;
  bool value :1;
} _SlidingHyperService_get_union_with_element_args__isset;

class SlidingHyperService_get_union_with_element_args {
 public:

  static const char* ascii_fingerprint; // = "A4B93510E7B2EA299B0AB04419DF11EC";
  static const uint8_t binary_fingerprint[16]; // = {0xA4,0xB9,0x35,0x10,0xE7,0xB2,0xEA,0x29,0x9B,0x0A,0xB0,0x44,0x19,0xDF,0x11,0xEC};

  SlidingHyperService_get_union_with_element_args(const SlidingHyperService_get_union_with_element_args&);
  SlidingHyperService_get_union_with_element_args& operator=(const SlidingHyperService_get_union_with_element_args&);
  SlidingHyperService_get_union_with_element_args() : timestamp(0), window(0), value() {
  }

  virtual ~SlidingHyperService_get_union_with_element_args() throw();
  int32_t timestamp;
  int16_t window;
  std::vector<std::string>  keys;
  std::string value;

  _SlidingHyperService_get_union_with_element_args__isset __isset;

  void __set_timestamp(const int32_t val);

  void __set_window(const int16_t val);

  void __set_keys(const std::vector<std::string> & val);

  void __set_value(const std::string& val);

  bool operator == (const SlidingHyperService_get_union_with_element_args & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(window == rhs.window))
      return false;
    if (!(keys == rhs.keys))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const SlidingHyperService_get_union_with_element_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlidingHyperService_get_union_with_element_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_get_union_with_element_args& obj);
};


class SlidingHyperService_get_union_with_element_pargs {
 public:

  static const char* ascii_fingerprint; // = "A4B93510E7B2EA299B0AB04419DF11EC";
  static const uint8_t binary_fingerprint[16]; // = {0xA4,0xB9,0x35,0x10,0xE7,0xB2,0xEA,0x29,0x9B,0x0A,0xB0,0x44,0x19,0xDF,0x11,0xEC};


  virtual ~SlidingHyperService_get_union_with_element_pargs() throw();
  const int32_t* timestamp;
  const int16_t* window;
  const std::vector<std::string> * keys;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_get_union_with_element_pargs& obj);
};

typedef struct _SlidingHyperService_get_union_with_element_result__isset {
  _SlidingHyperService_get_union_with_element_result__isset() : success(false) {}
  bool success :1;
} _SlidingHyperService_get_union_with_element_result__isset;

class SlidingHyperService_get_union_with_element_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  SlidingHyperService_get_union_with_element_result(const SlidingHyperService_get_union_with_element_result&);
  SlidingHyperService_get_union_with_element_result& operator=(const SlidingHyperService_get_union_with_element_result&);
  SlidingHyperService_get_union_with_element_result() : success(0) {
  }

  virtual ~SlidingHyperService_get_union_with_element_result() throw();
  int32_t success;

  _SlidingHyperService_get_union_with_element_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SlidingHyperService_get_union_with_element_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SlidingHyperService_get_union_with_element_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SlidingHyperService_get_union_with_element_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_get_union_with_element_result& obj);
};

typedef struct _SlidingHyperService_get_union_with_element_presult__isset {
  _SlidingHyperService_get_union_with_element_presult__isset() : success(false) {}
  bool success :1;
} _SlidingHyperService_get_union_with_element_presult__isset;

class SlidingHyperService_get_union_with_element_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~SlidingHyperService_get_union_with_element_presult() throw();
  int32_t* success;

  _SlidingHyperService_get_union_with_element_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SlidingHyperService_get_union_with_element_presult& obj);
};

class SlidingHyperServiceClient : virtual public SlidingHyperServiceIf {
 public:
  SlidingHyperServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SlidingHyperServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(std::string& _return);
  void send_ping();
  void recv_ping(std::string& _return);
  void add_many(const int32_t timestamp, const std::string& key, const std::vector<std::string> & values);
  void send_add_many(const int32_t timestamp, const std::string& key, const std::vector<std::string> & values);
  void recv_add_many();
  int32_t card(const int32_t timestamp, const int32_t window, const std::vector<std::string> & keys, const std::vector<std::string> & values);
  void send_card(const int32_t timestamp, const int32_t window, const std::vector<std::string> & keys, const std::vector<std::string> & values);
  int32_t recv_card();
  void flush();
  void send_flush();
  void recv_flush();
  void add(const int32_t timestamp, const std::string& key, const std::string& value);
  void send_add(const int32_t timestamp, const std::string& key, const std::string& value);
  void recv_add();
  int32_t get(const int32_t timestamp, const int16_t window, const std::string& key);
  void send_get(const int32_t timestamp, const int16_t window, const std::string& key);
  int32_t recv_get();
  int32_t get_union(const int32_t timestamp, const int16_t window, const std::vector<std::string> & keys);
  void send_get_union(const int32_t timestamp, const int16_t window, const std::vector<std::string> & keys);
  int32_t recv_get_union();
  int32_t get_with_element(const int32_t timestamp, const int16_t window, const std::string& key, const std::string& value);
  void send_get_with_element(const int32_t timestamp, const int16_t window, const std::string& key, const std::string& value);
  int32_t recv_get_with_element();
  int32_t get_union_with_element(const int32_t timestamp, const int16_t window, const std::vector<std::string> & keys, const std::string& value);
  void send_get_union_with_element(const int32_t timestamp, const int16_t window, const std::vector<std::string> & keys, const std::string& value);
  int32_t recv_get_union_with_element();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SlidingHyperServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SlidingHyperServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SlidingHyperServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_many(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_card(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_flush(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_union(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_with_element(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_union_with_element(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SlidingHyperServiceProcessor(boost::shared_ptr<SlidingHyperServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &SlidingHyperServiceProcessor::process_ping;
    processMap_["add_many"] = &SlidingHyperServiceProcessor::process_add_many;
    processMap_["card"] = &SlidingHyperServiceProcessor::process_card;
    processMap_["flush"] = &SlidingHyperServiceProcessor::process_flush;
    processMap_["add"] = &SlidingHyperServiceProcessor::process_add;
    processMap_["get"] = &SlidingHyperServiceProcessor::process_get;
    processMap_["get_union"] = &SlidingHyperServiceProcessor::process_get_union;
    processMap_["get_with_element"] = &SlidingHyperServiceProcessor::process_get_with_element;
    processMap_["get_union_with_element"] = &SlidingHyperServiceProcessor::process_get_union_with_element;
  }

  virtual ~SlidingHyperServiceProcessor() {}
};

class SlidingHyperServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SlidingHyperServiceProcessorFactory(const ::boost::shared_ptr< SlidingHyperServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SlidingHyperServiceIfFactory > handlerFactory_;
};

class SlidingHyperServiceMultiface : virtual public SlidingHyperServiceIf {
 public:
  SlidingHyperServiceMultiface(std::vector<boost::shared_ptr<SlidingHyperServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SlidingHyperServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SlidingHyperServiceIf> > ifaces_;
  SlidingHyperServiceMultiface() {}
  void add(boost::shared_ptr<SlidingHyperServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return);
    }
    ifaces_[i]->ping(_return);
    return;
  }

  void add_many(const int32_t timestamp, const std::string& key, const std::vector<std::string> & values) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_many(timestamp, key, values);
    }
    ifaces_[i]->add_many(timestamp, key, values);
  }

  int32_t card(const int32_t timestamp, const int32_t window, const std::vector<std::string> & keys, const std::vector<std::string> & values) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->card(timestamp, window, keys, values);
    }
    return ifaces_[i]->card(timestamp, window, keys, values);
  }

  void flush() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->flush();
    }
    ifaces_[i]->flush();
  }

  void add(const int32_t timestamp, const std::string& key, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(timestamp, key, value);
    }
    ifaces_[i]->add(timestamp, key, value);
  }

  int32_t get(const int32_t timestamp, const int16_t window, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(timestamp, window, key);
    }
    return ifaces_[i]->get(timestamp, window, key);
  }

  int32_t get_union(const int32_t timestamp, const int16_t window, const std::vector<std::string> & keys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_union(timestamp, window, keys);
    }
    return ifaces_[i]->get_union(timestamp, window, keys);
  }

  int32_t get_with_element(const int32_t timestamp, const int16_t window, const std::string& key, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_with_element(timestamp, window, key, value);
    }
    return ifaces_[i]->get_with_element(timestamp, window, key, value);
  }

  int32_t get_union_with_element(const int32_t timestamp, const int16_t window, const std::vector<std::string> & keys, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_union_with_element(timestamp, window, keys, value);
    }
    return ifaces_[i]->get_union_with_element(timestamp, window, keys, value);
  }

};



#endif
