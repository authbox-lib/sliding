// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "SlidingHyperService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class SlidingHyperServiceHandler : virtual public SlidingHyperServiceIf {
 public:
  SlidingHyperServiceHandler() {
    // Your initialization goes here
  }

  void ping(std::string& _return) {
    // Your implementation goes here
    printf("ping\n");
  }

  void add_many(const int32_t timestamp, const std::string& key, const std::vector<std::string> & values) {
    // Your implementation goes here
    printf("add_many\n");
  }

  int32_t card(const int32_t timestamp, const int32_t window, const std::vector<std::string> & keys, const std::vector<std::string> & values) {
    // Your implementation goes here
    printf("card\n");
  }

  void flush() {
    // Your implementation goes here
    printf("flush\n");
  }

  void add(const int32_t timestamp, const std::string& key, const std::string& value) {
    // Your implementation goes here
    printf("add\n");
  }

  int32_t get(const int32_t timestamp, const int16_t window, const std::string& key) {
    // Your implementation goes here
    printf("get\n");
  }

  int32_t get_union(const int32_t timestamp, const int16_t window, const std::vector<std::string> & keys) {
    // Your implementation goes here
    printf("get_union\n");
  }

  int32_t get_with_element(const int32_t timestamp, const int16_t window, const std::string& key, const std::string& value) {
    // Your implementation goes here
    printf("get_with_element\n");
  }

  int32_t get_union_with_element(const int32_t timestamp, const int16_t window, const std::vector<std::string> & keys, const std::string& value) {
    // Your implementation goes here
    printf("get_union_with_element\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<SlidingHyperServiceHandler> handler(new SlidingHyperServiceHandler());
  shared_ptr<TProcessor> processor(new SlidingHyperServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

